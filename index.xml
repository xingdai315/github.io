<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>🈚️他 ，唯🤚熟尔</title>
    <link>https://ddmmyy.cc/</link>
    <description>Recent content on 🈚️他 ，唯🤚熟尔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright (c) 2020.</copyright>
    <lastBuildDate>Tue, 24 Mar 2020 21:51:08 +0800</lastBuildDate>
    
	<atom:link href="https://ddmmyy.cc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go协程并发控制</title>
      <link>https://ddmmyy.cc/post/go%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 24 Mar 2020 21:51:08 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/go%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>go协程并发控制 learn go
利用WaitGroup和阻塞channel实现协程并发控制,始终保持协程与核心数量相等
const ( conNum = 4	//cpu cores ) func main() { wg := &amp;amp;sync.WaitGroup{} ch := make(chan bool, conNum) var list map[string]string err := someApi(api_url, &amp;amp;list) if err != nil { log.Fatalln(err) } for k, v := range list { wg.Add(1) ch &amp;lt;- true go func(wg *sync.WaitGroup, id string, url string) { err := doSomeThing(id, url) if err != nil { log.Println(err) } &amp;lt;-ch defer wg.Done() }(wg, k, v) } wg.</description>
    </item>
    
    <item>
      <title>I3wm</title>
      <link>https://ddmmyy.cc/post/i3wm/</link>
      <pubDate>Sun, 16 Feb 2020 17:24:13 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/i3wm/</guid>
      <description>十几年前注册的yupoo居然还能登陆，以前的图没了，发两张测试一下图床
桌面背景用脚本拉的 https://bz.zzzmh.cn/ 打个广告，网站不错，喜欢的可以donate
i3wm全家桶，有喜欢的以后可以pull上来配置文件</description>
    </item>
    
    <item>
      <title>再次解决s3.amazonaws</title>
      <link>https://ddmmyy.cc/post/%E5%86%8D%E6%AC%A1%E8%A7%A3%E5%86%B3s3.amazonaws.com%E4%B8%8B%E8%BD%BD%E6%85%A2%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 12 Feb 2020 15:11:17 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/%E5%86%8D%E6%AC%A1%E8%A7%A3%E5%86%B3s3.amazonaws.com%E4%B8%8B%E8%BD%BD%E6%85%A2%E9%97%AE%E9%A2%98/</guid>
      <description>偶然发现电脑通过联通手机4G热点上网，在s3.amazon下载十分的快，有大几百K很是不赖。所以思量这通过手机热点和家里有线结合使用
 1.网络状况 工作电脑
网桥设备使用网桥设备br0.network ，网络地址 192.168.31.199,出口北京电信
手机设备
联通4G，连接后获取ip地址 192.168.43.154
理想状态
平时通过有线设备上网，因为工作机使用kvm桥接，所以虚拟了bridge设备（无线网卡不支持）。遇到下载问题开打手机热点自动连接，走无线设备路由上网。所以要解决的就是静态路由优先级的问题。
2.设置网络设备meric win和mac下对跳跃点设置比较简单，linux稍微麻烦了点。查到了ubuntu关于systemd.network设置的文档，Archlinux应该也是通用的。 链接如下 systemd.network.5.gz
无线设备管理
我这里使用的 systemd + iwd 的方式管理无线连接，其他方式参考即可。linux 网络设备管理的方式太多了，让人烟花缭乱，目前使用systemd.network 统一管理清爽多了。首先保证打开热点网络链接正常再往下进行。
无线配置文件
在DHCP section增加 RouteMetric字段，跳跃点512
$ cat 25-wireless.network [Match] Name=wlp3s0 [Network] DHCP=ipv4 [DHCP] RouteMetric=512 网桥配置文件
如果是真实网卡就是网卡的配置文件，增加[Route] section,注意这里的写法和[DHCP]不同;
Metric的值小于无线设备路由的值
$ cat br0.network [Match] Name=enp4s0 [Match] Name=br0 [Network] Address=192.168.31.199 #Gateway=192.168.31.1 #DNS=192.168.31.1 [Route] #Destination=default Gateway=192.168.31.1 Metric=1024 重启网络&amp;amp;查看路由表
$ sudo systemctl restart systemd-networkd $ ip route default via 192.168.43.1 dev wlp3s0 proto dhcp src 192.</description>
    </item>
    
    <item>
      <title>Merlin系统使用过程的笔记</title>
      <link>https://ddmmyy.cc/post/merlin%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 11 Feb 2020 13:12:46 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/merlin%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E7%AC%94%E8%AE%B0/</guid>
      <description>r7000上手两天直接刷了merlin x7.9.1 ,过程很简单就是v1版多重置了一次
下面是使用中的问题，会持续记录一下
 1.godaddy域名更新脚本 之前写过在openwrt下的自动更新脚本设置，换到梅林系统后看到软件中心有godday的更新脚本就安装了一下。发现也是inteval retry的模式，填好以后就没管他。过了一天发现godday没有更新。估计是插件有问题，手工执行update脚本可以更新，估计是计划任务出了问题。懒得从这个角度排查了，梅林肯定也有触发脚本，找一下果然有
xing@R7000-2992:/tmp/home/root# cat /jffs/scripts/wan-start #!/bin/sh /usr/bin/onwanstart.sh sh /koolshare/scripts/gdddns_update.sh /usr/bin/plugin.sh start 把脚本扔过去，我看插件作者的脚本写的也不错就不换成我自己的了。
2.dns上游解析速度慢解决 关于DNS解析比较容易理解，如果你还要同时科学上网的话就要注意一下了。梅林上用的也是dnsmasq做本地的代理和缓存。根据不同的规则决定上游DNS的选择（对国内的网站解析速度优先，国外站点安全优先）。
最初的设置是
  客户端DNS -&amp;gt; 路由器LAN地址192.168.50.1
  路由器dnsmasq设置默认DNS 119.29.29.29 dnspod,
  gfvv域名根据域名匹配解析转发本地dns2socks进程127.0.0.1 9137端口 -&amp;gt; 8.8.8.8#53
  但是在客户端（resolv指向50.1),解析国内域名大概率超时无法返回结果。测试了很多地方也找不到原因，后来随后把梅林后台默认上游DNS服务器设置 自动获取远程网络地址 问题居然就解决了。
我的配置文件
xing@R7000-2992:/tmp/home/root# cat /tmp/etc/dnsmasq.conf pid-file=/var/run/dnsmasq.pid ... no-resolv all-servers server=219.141.140.10#53 server=219.141.136.10#53 no-negcache ... #dnsmasq.d里的conf优先级高于上面的server，从而实现分流 conf-dir=/jffs/configs/dnsmasq.d 补充一下dnsmasq的解析工作的流程
 本地hosts，可以是系统提供的/etc/hosts, 也可以关闭系统的自己指定hosts文件，支持多文件更灵活； 操作系统提供的上游DNS，/etc/resolv.conf,一般做法是指定为localhost，让dnsmasq自己决定上游，也可以关闭它； /youerpath/dnsmasq.d/* 最后才是上游DNS  3. 与二级路由互通静态路由 工作电脑上运行了kvm k8s，网络还是以前的网段。k8s改ip很麻烦，暂时二级路由过渡一下，对网络不熟记录一下，二级路由wan连接一级路由lan，分配ip 50.2二级路由lan地址31.1；主路由增加静态路由下面最后一条，实现主路由到二级路由下资源的访问。</description>
    </item>
    
    <item>
      <title>路由器自动更新godaddy解析记录</title>
      <link>https://ddmmyy.cc/post/%E8%B7%AF%E7%94%B1%E5%99%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0godaddy%E8%A7%A3%E6%9E%90%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 05 Feb 2020 11:32:03 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/%E8%B7%AF%E7%94%B1%E5%99%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0godaddy%E8%A7%A3%E6%9E%90%E8%AE%B0%E5%BD%95/</guid>
      <description>最近又启用了老的路由器，基于openwrt系统，没有固件可用root后凑合用了
 有时候会有ssh回到家里路由器openwrt系统里操作的需求，以前一直走ip。最近电信renew的比较频繁公网ip经常变化所以还是走域名吧。
 环境是openwrt 12，确定命令正常即可； pppoe重新获取公网ip后会执行ip-up.d 目录下脚本，利用这个特性进行ddns记录更新。网上有通过crontab定时刷的方式比较rube，而且有的dns平台有api调用限制； 脚本位置 /etc/ppp/ip-up.d/autoddns.sh  #/bin/sh # Openwrt system # Positon /etc/ppp/ip-up.d # Update godaddy&amp;#39;s dns resolved record once global ip changed # G_Key=&amp;#39;your_key&amp;#39; G_Secret=&amp;#39;youer_sec&amp;#39; Domain=&amp;#39;example.com&amp;#39; Name=&amp;#39;hostname&amp;#39; Type=&amp;#39;A&amp;#39; IP=$(ifconfig |awk -F&amp;#34;[: ]&amp;#34; &amp;#39;/pppoe-wan/{getline;print $13}&amp;#39;) Upstatus=$(curl -kLsXPUT -H&amp;#34;Authorization: sso-key ${G_Key}:${G_Secret}&amp;#34; -H &amp;#34;Content-type: application/json&amp;#34; \ https://api.godaddy.com/v1/domains/${Domain}/records/${Type}/${Name} \ -d &amp;#34;[{\&amp;#34;data\&amp;#34;:\&amp;#34;${IP}\&amp;#34;,\&amp;#34;ttl\&amp;#34;:600}]&amp;#34; 2&amp;gt;/dev/null) exit 0 重启下网络看看新的IP解析是否更新到了godday解析，空间有限就不记录运行日志了。
enjoy</description>
    </item>
    
    <item>
      <title>从github下载龟速暂时解决方法</title>
      <link>https://ddmmyy.cc/post/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BD%E9%BE%9F%E9%80%9F%E6%9A%82%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 02 Feb 2020 01:20:03 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BD%E9%BE%9F%E9%80%9F%E6%9A%82%E6%97%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>从github下载龟速暂时解决方法 坐标北京电信，github主站目前速度还可以接受。但有些基于brew等需要从github上下载软件就变得非常缓慢，基本在1kB左右的下载速度，堪比电话拨号。。
下载过程显示github跳转域名如下，问题出在了github的CDN上。amazonaws估计被干扰了。
github-production-release-asset-2e65be.s3.amazonaws.com dig信息查询一下CNAME域名
github-production-release-asset-2e65be.s3.amazonaws.com. 30 IN CNAME s3-1-w.amazonaws.com. s3-1-w.amazonaws.com.	30	IN	A	52.217.10.180 通过大名鼎鼎的IPaddress.com 查询一下该域名的本地解析的另一个地址
Domain	amazonaws.com IP Address	52.216.240.68 Web Server Location	United States 直接加到hosts试试，我mac上用的Gas Mask。
52.216.240.68	s3-1-w.amazonaws.com 确认没有缓存后再测试，15KB/s &amp;hellip; 提升15倍 &amp;hellip;.
值得庆祝一下</description>
    </item>
    
    <item>
      <title>Kvm_base_Archlinux</title>
      <link>https://ddmmyy.cc/post/kvm_base_archlinux/</link>
      <pubDate>Fri, 31 Jan 2020 18:49:07 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/kvm_base_archlinux/</guid>
      <description>Kvm base Archlinux  本文是我在Arch系统下做kvm虚拟机的随笔，希望对有共同需求的人有所帮助
 一、系统基础 硬件 &amp;amp; 系统 （上个neofetch）
OS: Arch Linux x86_64 Host: MS-7846 3.0 Kernel: 5.4.14-arch1-1 Uptime: 3 hours, 10 mins Packages: 552 (pacman) Shell: bash 5.0.11 Resolution: 2560x1440 WM: i3 Theme: Arc-Dark [GTK2/3] Icons: Arc [GTK2/3] Terminal: tilix CPU: Intel i5-4590 (4) @ 3.700GHz GPU: Intel HD Graphics Memory: 4274MiB / 15879MiB 二、硬件内核支持 ​	硬件和内核支持请移步archlinux的wiki
三、软件安装 pacman -Sy qemu libvirt virt-manager ovmf ebtables dnsmasq dmidecode bridge-utils [openbsd-netcat] [cdrtools]  [] 可选，如启动libvitd是还有依赖请自行安装  systemctl enable libvirtd systemctl start libvirtd 四、网络设置 重点讲一下网络部分的设置，其他部分网上信息很多。如果你希望使用网桥模式使用虚拟机这部分还是很重要的。</description>
    </item>
    
    <item>
      <title>Docker使用代理模式</title>
      <link>https://ddmmyy.cc/post/docker%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 31 Jan 2020 18:29:44 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/docker%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>docker使用代理模式 基于systemd的override方式
systemctl edit docker 填写代理信息
[Service] Environment=&amp;quot;HTTP_PROXY=http://192.168.31.199:8118/&amp;quot; &amp;quot;HTTPS_PROXY=http://192.168.31.199:8118/&amp;quot; &amp;quot;NO_PROXY=localhost,127.0.0.1,registry.docker-cn.com&amp;quot; 读取配置&amp;amp;重启
systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker </description>
    </item>
    
    <item>
      <title>Mixed_mode_bootsys</title>
      <link>https://ddmmyy.cc/post/%E5%A4%9A%E7%A1%AC%E7%9B%98%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Fri, 31 Jan 2020 18:16:27 +0800</pubDate>
      
      <guid>https://ddmmyy.cc/post/%E5%A4%9A%E7%A1%AC%E7%9B%98%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8/</guid>
      <description>多硬盘混合模式启动 一、缘起  老台式机主机已经安装了win10,目前有两块硬盘三星evo 120G系统盘，WD1T数据盘。 之前安装系统还是MBR方式，新增M.2 Nvme固态盘（PCIe转接卡）安装Linux（使用uefi +GPT方式
 Base Board Information Manufacturer: MSI Product Name: H97M-E35 (MS-7846) 二、遇到的问题   m2+pci-e转接方式重启电脑有时候不识别
主机关机加电开机进入BIOS，可以正常识别Nvme固态盘，热重启进入BIOS无法找到。
  BIOS启动模式legacy 和 UEFI方式不兼容
MSI主板提供了legacy、UEFI和混合模式启动，实际使用中发现以UEFI方式进入Linux系统后，重新写入EFI信息重启进入BIOS 可以显示EFI启动项并正常进入系统（此时windows无法启动）。切换到legacy+UEFI模式后windows可正常启动，但是Linux的UEFI引导信息丢失（再切换回UEFI模式也丢失了信息）
  三、解决方式   关闭BIOS中快速启动项
  保持BIOS中启动项为混合模式，开机无感进入win10模式。通过开机选项键（F11 不同主办可能不同）
选择uefi:built-in efi shell ，通过map指令查看目前磁盘分区。找到Nvme磁盘的efi分区。我这里是blk0
执行
blk0: \EFI\aRGrub\grubx64.efi 就可以进入GRUB然后进入Linux （aRGrub是我自己系统的目录）
每次手动执行有点累&amp;hellip;我这里在efi分区下增加了startup.nsh脚本，这个搜索一下有很多结果。
[none@mypc ~]$ cat /boot/efi/startup.nsh blk0:\EFI\aRGrub\grubx64.efi 进入efi shell后再按下回车执行startup脚本即可 😃
  </description>
    </item>
    
  </channel>
</rss>